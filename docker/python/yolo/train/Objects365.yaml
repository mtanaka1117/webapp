# Ultralytics YOLO 🚀, AGPL-3.0 license
# Objects365 dataset https://www.objects365.org/ by Megvii
# Documentation: https://docs.ultralytics.com/datasets/detect/objects365/
# Example usage: yolo train data=Objects365.yaml
# parent
# ├── ultralytics
# └── datasets
#     └── Objects365  ← downloads here (712 GB = 367G data + 345G zips)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: /home/srv-admin/webapp/docker/python/yolo/datasets/Objects365 # dataset root dir
train: images/train # train images (relative to 'path') 1742289 images
val: images/val # val images (relative to 'path') 80000 images
test: images/test

nc: 28
names: ["Person", "Glasses", "Bottle", "Cup", "Handbag/Satchel", "Book",
        "Umbrella", "Watch", "Pen/Pencil", "Cell Phone",
        "Laptop", "Clock", "Keyboard", "Mouse", "Head Phone", "Remote",
        "Scissors", "Folder", "earphone", "Mask", "Tissue", "Wallet/Purse",
        "Tablet", "Key", "CD", "Stapler", "Eraser", "Lipstick"]

#   0: Person
#   7: Glasses
#   8: Bottle
#   10: Cup
#   13: Handbag/Satchel
#   18: Book
#   37: Monitor/TV
#   39: Umbrella
#   42: Watch
#   54: Pen/Pencil
#   61: Cell Phone
#   73: Laptop
#   94: Clock
#   106: Keyboard
#   115: Mouse
#   125: Head Phone
#   132: Remote
#   169: Scissors
#   205: Folder
#   207: earphone
#   208: Mask
#   225: Tissue
#   238: Wallet/Purse
#   243: Tablet
#   251: Key
#   284: CD
#   299: Tape Measure/Ruler
#   306: Stapler
#   357: Eraser
#   361: Lipstick

# Download script/URL (optional) ---------------------------------------------------------------------------------------
# download: |
#   from tqdm import tqdm

#   from ultralytics.utils.checks import check_requirements
#   from ultralytics.utils.downloads import download
#   from ultralytics.utils.ops import xyxy2xywhn

#   import numpy as np
#   from pathlib import Path

#   check_requirements(('pycocotools>=2.0',))
#   from pycocotools.coco import COCO

#   # Make Directories
#   dir = Path(yaml['path'])  # dataset root dir
#   for p in 'images', 'labels':
#       (dir / p).mkdir(parents=True, exist_ok=True)
#       for q in 'train', 'val':
#           (dir / p / q).mkdir(parents=True, exist_ok=True)

#   # Train, Val Splits
#   for split, patches in [('train', 50 + 1), ('val', 43 + 1)]:
#       print(f"Processing {split} in {patches} patches ...")
#       images, labels = dir / 'images' / split, dir / 'labels' / split

#       # Download
#       url = f"https://dorc.ks3-cn-beijing.ksyun.com/data-set/2020Objects365%E6%95%B0%E6%8D%AE%E9%9B%86/{split}/"
#       if split == 'train':
#           download([f'{url}zhiyuan_objv2_{split}.tar.gz'], dir=dir)  # annotations json
#           download([f'{url}patch{i}.tar.gz' for i in range(patches)], dir=images, curl=True, threads=8)
#       elif split == 'val':
#           download([f'{url}zhiyuan_objv2_{split}.json'], dir=dir)  # annotations json
#           download([f'{url}images/v1/patch{i}.tar.gz' for i in range(15 + 1)], dir=images, curl=True, threads=8)
#           download([f'{url}images/v2/patch{i}.tar.gz' for i in range(16, patches)], dir=images, curl=True, threads=8)

#       # Move
#       for f in tqdm(images.rglob('*.jpg'), desc=f'Moving {split} images'):
#           f.rename(images / f.name)  # move to /images/{split}

#       # Labels
#       coco = COCO(dir / f'zhiyuan_objv2_{split}.json')
#       names = [x["name"] for x in coco.loadCats(coco.getCatIds())]
#       for cid, cat in enumerate(names):
#           catIds = coco.getCatIds(catNms=[cat])
#           imgIds = coco.getImgIds(catIds=catIds)
#           for im in tqdm(coco.loadImgs(imgIds), desc=f'Class {cid + 1}/{len(names)} {cat}'):
#               width, height = im["width"], im["height"]
#               path = Path(im["file_name"])  # image filename
#               try:
#                   with open(labels / path.with_suffix('.txt').name, 'a') as file:
#                       annIds = coco.getAnnIds(imgIds=im["id"], catIds=catIds, iscrowd=None)
#                       for a in coco.loadAnns(annIds):
#                           x, y, w, h = a['bbox']  # bounding box in xywh (xy top-left corner)
#                           xyxy = np.array([x, y, x + w, y + h])[None]  # pixels(1,4)
#                           x, y, w, h = xyxy2xywhn(xyxy, w=width, h=height, clip=True)[0]  # normalized and clipped
#                           file.write(f"{cid} {x:.5f} {y:.5f} {w:.5f} {h:.5f}\n")
#               except Exception as e:
#                   print(e)